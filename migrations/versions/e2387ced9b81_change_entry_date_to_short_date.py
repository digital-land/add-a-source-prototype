"""change entry date to short date

Revision ID: e2387ced9b81
Revises: 44572e276fed
Create Date: 2023-02-28 14:37:31.612787

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "e2387ced9b81"
down_revision = "44572e276fed"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("_default", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("attribution", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("column", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("combine", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("concat", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("convert", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("dataset", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("datatype", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("default_value", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("endpoint", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("field", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("filter", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("licence", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("lookup", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("organisation", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("patch", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("skip", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("source", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("transform", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    with op.batch_alter_table("typology", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.Date(),
            existing_nullable=True,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("typology", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("transform", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("source", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("skip", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("patch", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("organisation", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("lookup", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("licence", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("filter", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("field", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("endpoint", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("default_value", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("datatype", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("dataset", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("convert", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("concat", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("combine", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("column", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("attribution", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("_default", schema=None) as batch_op:
        batch_op.alter_column(
            "entry_date",
            existing_type=sa.Date(),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    # ### end Alembic commands ###
